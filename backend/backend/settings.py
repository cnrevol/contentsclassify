"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import datetime

# Load environment variables from .env file
env_path = Path(__file__).resolve().parent.parent.parent / '.env'
load_dotenv(env_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Create logs directory if it doesn't exist
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

# LLM Configuration
AZ_OPENAI_API_KEY = os.getenv('AZ_OPENAI_API_KEY', '')
AZ_OPENAI_API_URL = os.getenv('AZ_OPENAI_API_URL', 'https://aicontents.openai.azure.com/openai/')

CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY', '')

QWEN_API_KEY = os.getenv('QWEN_API_KEY', '')
QWEN_MODEL_NAME = os.getenv('QWEN_MODEL_NAME', '')

# Doubao (ARK) Configuration
ARK_API_KEY = os.getenv('ARK_API_KEY', '')
ARK_API_URL = os.getenv('ARK_API_URL', 'https://ark.cn-beijing.volces.com/api/v3')
ARK_MODEL_NAME = os.getenv('ARK_MODEL_NAME', 'ep-20250122094617-phvlf')

DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', '')
DEEPSEEK_API_URL = os.getenv('DEEPSEEK_API_URL', 'https://api.deepseek.com/v1')
DEEPSEEK_MODEL_NAME = os.getenv('DEEPSEEK_MODEL_NAME', 'deepseek-chat')

# Default LLM Provider
DEFAULT_LLM_PROVIDER = os.getenv('DEFAULT_LLM_PROVIDER', 'doubao')

# LLM Provider Configurations
LLM_PROVIDERS = {
    'openai': {
        'name': 'OpenAI',
        'models': ['gpt-3.5-turbo', 'gpt-4'],
        'default_model': 'gpt-4',
        'config_prefix': 'AZ_OPENAI',
        'model_type': 'llm'
    },
    # 'claude': {
    #     'name': 'Claude',
    #     'models': ['claude-3-opus-20240229', 'claude-3-sonnet-20240229'],
    #     'default_model': 'claude-3-sonnet-20240229',
    #     'config_prefix': 'CLAUDE',
    #     'model_type': 'llm'
    # },
    # 'qwen': {
    #     'name': 'Qwen',
    #     'models': ['qwen-max', 'qwen-plus', 'qwen-turbo'],
    #     'default_model': 'qwen-max',
    #     'config_prefix': 'QWEN',
    #     'model_type': 'llm'
    # },
    # 'doubao': {
    #     'name': 'Doubao',
    #     'models': ['ep-20250122094617-phvlf'],
    #     'default_model': 'ep-20250122094617-phvlf',
    #     'config_prefix': 'ARK',
    #     'model_type': 'llm'
    # },
    'deepseek': {
        'name': 'Deepseek',
        'models': ['deepseek/deepseek-chat:free', 'deepseek/deepseek-r1:free'],
        'default_model': 'deepseek/deepseek-chat:free',
        'config_prefix': 'DEEPSEEK',
        'model_type': 'llm'
    },
    'bert': {
        'name': 'BERT',
        'models': ['bert-base-chinese'],
        'default_model': 'bert-base-chinese',
        'config_prefix': 'BERT',
        'model_type': 'classifier'
    },
    'fasttext': {
        'name': 'FastText',
        'models': ['fasttext-chinese'],
        'default_model': 'fasttext-chinese',
        'config_prefix': 'FASTTEXT',
        'model_type': 'classifier'
    }
}

# Default LLM settings
DEFAULT_LLM_CONFIG = {
    'api_key': ARK_API_KEY,
    'base_url': ARK_API_URL,
    'model_name': ARK_MODEL_NAME,
    'temperature': 0.7,
    'max_tokens': 1000,
}

# Make sure the default provider exists in LLM_PROVIDERS
if DEFAULT_LLM_PROVIDER not in LLM_PROVIDERS:
    DEFAULT_LLM_PROVIDER = next(iter(LLM_PROVIDERS.keys()))

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', f'app_{datetime.now().strftime("%Y%m%d")}.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
            'delay': True,  # 延迟创建文件直到第一次写入
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'classifier': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'emailapp': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-default-key-for-development')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

# Disable automatic slash appending
APPEND_SLASH = False

# 允许的主机
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.azurewebsites.net',  # 允许所有 Azure Web Apps 域名
    os.getenv('WEBSITE_HOSTNAME', ''),  # Azure 提供的主机名
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    # Local apps
    'classifier',
    'emailapp',
    'fileapp',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, '..', 'frontend', 'build'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv('DB_NAME', 'content_classifier'),
#         'USER': os.getenv('DB_USER', 'postgres'),
#         'PASSWORD': os.getenv('DB_PASSWORD', ''),
#         'HOST': os.getenv('DB_HOST', 'localhost'),
#         'PORT': os.getenv('DB_PORT', '5432'),
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'aidb'),
        'USER': os.getenv('DB_USER', 'aiuser'),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'OPTIONS': {
            'options': f"-c search_path={os.getenv('DB_SCHEMA', 'asset')}"
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 添加前端构建文件的路径
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '..', 'frontend', 'build', 'static'),
]

# 前端构建文件的根目录
FRONTEND_BUILD_DIR = os.path.join(BASE_DIR, '..', 'frontend', 'build')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    'https://' + os.getenv('WEBSITE_HOSTNAME', ''),
    'http://localhost:3000',
]

CORS_ALLOW_CREDENTIALS = True

# File Upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Email Configuration
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
# EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

# BERT Configuration
BERT_MODEL_PATH = os.getenv('BERT_MODEL_PATH', 'models/bert')
# BERT_LABEL_MAP = {
#     0: "金融",
#     1: "房产",
#     2: "经济",
#     3: "教育",
#     4: "科技",
#     5: "社会",
#     6: "国际",
#     7: "体育",
#     8: "游戏",
#     9: "娱乐"
# }

BERT_LABEL_MAP = {
    1: "work",
    2: "festival",
    3: "meeting schedule"
}


# Email classification settings
FASTTEXT_THRESHOLD = 0.8
BERT_THRESHOLD = 0.5

# FastText Configuration
FASTTEXT_MODEL_PATH = os.getenv('FASTTEXT_MODEL_PATH', 'models/fasttext/model.bin')
# FASTTEXT_LABEL_MAP = {
#     "finance": "金融",
#     "realestate": "房产",
#     "economy": "经济",
#     "education": "教育",
#     "tech": "科技",
#     "society": "社会",
#     "international": "国际",
#     "sports": "体育",
#     "gaming": "游戏",
#     "entertainment": "娱乐"
# }

FASTTEXT_LABEL_MAP = {
    1: "work",
    2: "festival",
    3: "meeting schedule"
}

# Ensure logs directory exists
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# 确保媒体目录存在
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)

# 配置 whitenoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
